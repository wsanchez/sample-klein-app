[tox]

envlist =
    flake8, mypy
    py3{5,6}-{trial,coverage}
    coverage_combine
    docs

skip_missing_interpreters = True



##
# Build
##

[testenv]

basepython =
    py35: python3.5
    py36: python3.6


deps =
    {trial,coverage}: -r{toxinidir}/requirements-dev.txt

    coverage: coverage


whitelist_externals =
    cp
    rm


passenv =
    PATH
    LANG
    PYTHON_*
    CI CONTINUOUS_INTEGRATION TRAVIS TRAVIS_*
    _system_*
    CODECOV_OPTIONS


setenv =
    PIP_DISABLE_PIP_VERSION_CHECK=1
    VIRTUAL_ENV_DISABLE_PROMPT=true
    GIT_ASKPASS=echo

    coverage: COVERAGE_FILE={toxworkdir}/log/coverage.{envname}
    {coverage_combine,coverage_codecov}: COVERAGE_FILE={toxworkdir}/log/coverage

    {coverage,coverage_combine}: COVERAGE_HTML={envlogdir}/coverage_report_html
    {coverage,coverage_combine,coverage_codecov}: COVERAGE_XML={envlogdir}/coverage_report.xml

    coverage: COVERAGE_PROCESS_START={toxinidir}/.coveragerc


commands =
    {toxinidir}/bin/environment

    # Run trial without coverage
    trial: trial --logfile="{envlogdir}/trial.log" --temp-directory="{envlogdir}/trial.d" {posargs:sample_klein_app}

    # Copy this PTH file to site-packages in coverage test environments so that coverage runs
    # See: http://coverage.readthedocs.io/en/coverage-4.2/subprocess.html?highlight=COVERAGE_PROCESS_START#measuring-sub-processes
    coverage: {envpython} -c 'with open("{envsitepackagesdir}/zz_coverage.pth", "w") as f: f.write("import coverage\ncoverage.process_startup()\n")'
    coverage: coverage run --rcfile="{toxinidir}/.coveragerc" -m twisted.trial --logfile="{envlogdir}/trial.log" --temp-directory="{envlogdir}/trial.d" {posargs:sample_klein_app}

    # Copy aside coverage data for each test environment in case we want to look at it later
    coverage: cp "{env:COVERAGE_FILE}" "{envlogdir}/coverage"

    # Run coverage reports, ignore exit status
    coverage: - coverage html --rcfile="{toxinidir}/.coveragerc" -d "{env:COVERAGE_HTML}"
    coverage: - coverage xml --rcfile="{toxinidir}/.coveragerc" -o "{env:COVERAGE_XML}"
    coverage: - coverage report --rcfile="{toxinidir}/.coveragerc"



##
# Flake8 linting
##

[testenv:flake8]

basepython = python3.5

skip_install = True

deps =
    flake8
    flake8-bugbear
    flake8_docstrings
    flake8-import-order
    flake8-pep3101
    pep8-naming
    mccabe

commands =
    {toxinidir}/bin/environment

    flake8 {posargs:src/sample_klein_app}


[flake8]

disable-noqa = True
show-source  = True
doctests     = True

# Codes: http://flake8.pycqa.org/en/latest/user/error-codes.html
ignore =
    # One-line docstring should fit on one line with quotes
    # Ignored: We don't use one-line doc strings; all doc strings should be
    # multi-line.
    D200,

    # 1 blank line required between summary line and description
    # Ignored: We don't require summary lines.
    D205,

    # First line should end with a period
    # Ignored: First line isn't always a sentence.
    D400,

    # function name should be lowercase
    # Ignored: Conflicts with Twisted conventions.
    N802,

    # argument name should be lowercase
    # Ignored: Conflicts with Twisted conventions.
    N803,

    # camelcase imported as lowercase
    # Ignored: The point of renaming a symbol is so that it is different.
    N813,

    # End of list (allows last item to end with trailing ',')
    EOL

# flake8-import-order: local module name space
application-import-names = sample_klein_app,klein

# McCabe complexity checker
max-complexity = 10



##
# Mypy linting
##

[testenv:mypy]

basepython = python3.5

skip_install = True


deps =
    mypy-lang

    # Required for --fast-parser
    typed_ast


commands =
    {toxinidir}/bin/environment
    pip freeze

    #
    # --fast-parser is required for handling async/await syntax
    #
    # --silent-imports because imported code from Twisted/Klein is not typed
    # Note --silent-imports is apparently now documented as
    # --follow-imports=silent, but the actual code doesn't implement that.
    #
    mypy --fast-parser --silent-imports --disallow-untyped-defs {posargs:src}



##
# Combine coverage reports
##

[testenv:coverage_combine]

basepython = python3.5

skip_install = True

deps = coverage


commands =
    {toxinidir}/bin/environment

    coverage combine --append

    # Copy aside coverage data for each test environment in case we want to look at it later
    cp "{env:COVERAGE_FILE}" "{envlogdir}/coverage"

    # Run coverage reports, ignore exit status
    - coverage html --rcfile="{toxinidir}/.coveragerc" -d "{env:COVERAGE_HTML}"
    - coverage xml --rcfile="{toxinidir}/.coveragerc" -o "{env:COVERAGE_XML}"

    # Don't ignore exit status here; this is our failure status if coverage is insufficient.
    coverage report --rcfile="{toxinidir}/.coveragerc"



##
# Publish to Codecov
##

[testenv:coverage_codecov]

basepython = python3.5

skip_install = True

deps = codecov


commands =
    {toxinidir}/bin/environment

    coverage combine --append

    # Generate XML and publish to codecov.io
    # Ignore errors generating coverage XML, which may be due to < 100% coverage; we still want to publish
    - coverage xml --rcfile="{toxinidir}/.coveragerc" -o "{env:COVERAGE_XML}"
    codecov --required --file="{env:COVERAGE_XML}" {env:CODECOV_OPTIONS:}



##
# Documentation
##

[testenv:docs]

basepython = python3.5


deps =
    sphinx
    sphinx_rtd_theme
    -r{toxinidir}/requirements-dev.txt


commands =
    {toxinidir}/bin/environment

    rm -fr "{envdir}/sphinx_source" "{toxworkdir}/dist/docs"
    cp -r "{toxinidir}/docs" "{envdir}/sphinx_source"
    sphinx-apidoc --separate --module-first --no-toc --output-dir "{envdir}/sphinx_source" "{toxinidir}/src/sample_klein_app" {posargs:}
    sphinx-build -W -b html -E "{envdir}/sphinx_source" "{toxworkdir}/dist/docs"
